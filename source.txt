unit Unit1;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, FMX.Layouts,
  FMX.StdCtrls, FMX.Helpers.Android, Androidapi.JNI.Util, FMX.Edit, Math;

type
  TForm1 = class(TForm)
    GridPanelLayout1: TGridPanelLayout;
    GridPanelLayout2: TGridPanelLayout;
    Refresh: TButton;
    Clear: TButton;
    Submit: TButton;
    Edit1: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure SubmitClick(Sender: TObject);
    procedure RefreshClick(Sender: TObject);
    procedure ClearClick(Sender: TObject);
    function Separate(str: string): string;
    function Parse(str: string): extended;
    function Replacer(str: string; counter: integer): string;
  private
  public
  end;

var
  Form1: TForm1;
  FrstRnd, ScndRnd : integer;
  Xstart, Ystart : array [0..9] of integer;
  finish : array [0..9] of extended;
  fnctn : string;
  Disp: JDisplayMetrics;
  NativeClientHeight, NativeClientWidth: Single;
{
Used to catch the screen size
}

implementation

{$R *.fmx}

function TForm1.Separate(str: string): string;
{
Separate func to parse parentheses
}
var
i,k,j,y,length : integer;
strArr : array [0..127] of string;
openArr, closeArr : array [0..15] of integer;
temp, temp2 : string;
tempArr : array [0..127] of string;

begin
result := '';
k := 0;
j := 0;
y := 0;
temp := '';
temp2 := '';
for i := 0 to 127 do
  begin
  strArr[i] := '';
  tempArr[i] := '';
  openArr[i] := 0;
  closeArr[i] := 0;
  end;
{
Zeroing
}

length := str.Length;


for i := 1 to length do
strArr[i] := copy(str,i,1);
for i := 0 to length do
strArr[i] := strArr[i+1];


for i := 0 to length do
  begin
  if strArr[i] = '(' then
    begin
    openArr[k] := i;
    k := k+1;
    end;
  if strArr[i] = ')' then
    begin
    closeArr[j] := i;
    j := j +1;
    end;
  end;
if not (k=j) then
  begin
  result := '246567693';
  exit;
  end;
{
if "(" -> counter for "(" +1
if ")" -> counter for "(" +1
if counters not equal -> break, it must be a typo or an error
}

if (k=0) and (j=0) then
begin
result := str;
exit;
end;
{
if both counters = 0, it means there's no parentheses, nothing to change
}

for i := 0 to k-1 do
  begin
  temp := copy(str,(openArr[i]+2),(closeArr[i]-(openArr[i]+1)));
  temp2 := FloatToStr(Form1.Parse(temp));
  strArr[openArr[i]] := temp2;
  for y := (openArr[i]+1) to closeArr[i] do
  strArr[y] := '';
  temp := '';
  temp2 := '';
  end;
for i := 0 to 127 do
result := result + strArr[i];

end;


function TForm1.Parse(str: string): extended;

var
i,k,j,y : integer;
ints : array [0..10] of extended;
fnctn : array [0..10] of string;
temp, temp2 : string;

begin
k := 0;
j := 0;
y := 0;
i := 0;
temp := '';
temp2 := '';


if str = '' then
begin
Result := 233417920;
exit;
end;
{
If there was nothing in input - return this number
}

for i := 1 to (str.length-1) do
  begin
  temp := copy(str,i,1);
  temp2 := copy(str,i+1,1);
  if ((temp = '*') and (temp2 = '*')) or ((temp = '*') and (temp2 = '+')) or
  ((temp = '*') and (temp2 = '/')) or ((temp = '+') and (temp2 = '*')) or
  ((temp = '+') and (temp2 = '/')) or  ((temp = '+') and (temp2 = '+')) or
  ((temp = '/') and (temp2 = '*')) or ((temp = '/') and (temp2 = '/')) or
  ((temp = '/') and (temp2 = '+')) or  ((temp = '-') and (temp2 = '*')) or
  ((temp = '-') and (temp2 = '/')) or ((temp = '-') and (temp2 = '+')) then
  delete(str,i+1,1);
  if ((temp = '*') and (temp2 = '-')) or ((temp = '/') and (temp2 = '-')) then
  insert('1',str,i+1);
  end;



for i := 0 to 10 do
begin
ints[i] := 0;
fnctn[i] := '';
end;

str := str + '+';


k := 1;


temp2 := '';
for i := 1 to str.Length do
begin
temp := copy(str,i,1);

if (temp = '1') or (temp = '2') or (temp = '3') or(temp = '4') or
(temp = '5') or (temp = '6') or (temp = '7') or (temp = '8')
or (temp = '9') or (temp = '0') or (temp = ',') then
{
if number or comma:
}
begin
temp2 := temp2 + temp;

end else
begin
if (temp = '*') or (temp = '/') or (temp = '+') or (temp = '-') then
{
If the sign of the arithmetic function, then:
}
begin
if temp2 = '' then temp2 := '0';

ints[k] := StrToFloat(temp2);

fnctn[k] := temp;

k := k+1;
temp2 := '';
temp := '';

end;
end;
end;


for i := 0 to k do
begin
if fnctn[i] = '-' then

begin
ints[i+1] := (-1)*ints[i+1];
{
sign reversal
}
if (fnctn[i-1] = '*') then

fnctn[i] := fnctn[i-1]
else
fnctn[i] := '+';

end;
end;


for i := 1 to k do
begin
ints[i-1] := ints[i];
fnctn[i-1] := fnctn[i];
end;


for i := 0 to k do
begin
if fnctn[i] = '/' then
begin
if ints[i+1] <> 0 then
begin
ints[i+1] := (1/ints[i+1]);
fnctn[i] := '*';
end
else
begin
Result := 122520484;
exit;
end;
end;
end;
{
return this number if user tried to divide by 0
}


for i := 0 to k do
begin
if fnctn[i] = '*' then
begin
ints[i] := ints[i]*ints[i+1];

for j := i+1 to k do
begin
ints[j] := ints[j+1];
fnctn[j-1] := fnctn[j];
end;
end;
end;


for i := 0 to k do
begin
if (fnctn[i] = '*') and (ints[i+1] <> 0) then
begin
ints[i] := ints[i]*ints[i+1];
for j := i+1 to k do
begin
ints[j] := ints[j+1];
fnctn[j-1] := fnctn[j];
end;
end;
end;


for y := 0 to 3 do
begin
for i := 0 to k do
begin
if fnctn[i] = '+' then
begin
ints[i] := ints[i]+ints[i+1];
for j := i+1 to k do
begin
ints[j] := ints[j+1];
fnctn[j] := fnctn[j+1];
end;
end;
end;
end;

Result := ints[0];
end;


function TForm1.Replacer(str: string; counter: integer): string;
var
i : integer;
memStr : string;
begin
result := '';
for i := 1 to str.Length do
begin
memStr := copy(str,i,1);
if (memStr <> 'x') and (memStr <> 'y') then
result := result + memStr
else
begin
if (memStr = 'x') then
result := result + IntToStr(Xstart[counter])
else
result := result + IntToStr(Ystart[counter])
end;
end;
end;


procedure ClearAll;
var
str : string;
begin
str := '';
Form1.Edit1.Text.Empty;
Form1.Label2.Text.Empty;
Form1.Label3.Text.Empty;
Form1.Edit1.Text := str;
Form1.Label2.Text := str;
Form1.Label3.Text := str;
end;
{
clearing function
}

procedure ClearAbsAll;
var
str : string;
begin
str := '';
Form1.Edit1.Text.Empty;
Form1.Label1.Text.Empty;
Form1.Label2.Text.Empty;
Form1.Label3.Text.Empty;
Form1.Label4.Text.Empty;
Form1.Label5.Text.Empty;
Form1.Edit1.Text := str;
Form1.Label1.Text := str;
Form1.Label2.Text := str;
Form1.Label3.Text := str;
Form1.Label4.Text := str;
Form1.Label5.Text := str;
end;


procedure TForm1.ClearClick(Sender: TObject);
var
str: string;
begin
str := '';
Edit1.Text.Empty;
Edit1.Text := str;
end;


procedure CreatingVars;
var
i: integer;
str : string;
begin
ClearAll;
randomize;
FrstRnd := 1 + random(2);
ScndRnd := 1 + random(7);
for i := 0 to 9 do
begin
Ystart[i] := 0;
Xstart[i] := i+1;
end;
if (FrstRnd = 2) then
begin
for i := 0 to 9 do
Ystart[i] := (10-i);
end;
if (FrstRnd = 1) then
begin
case ScndRnd of
1: fnctn := '(x-2)*(x-2)';
2: fnctn := 'x/x-x';
3: fnctn := 'x/x+x';
4: fnctn := 'x*x-x';
5: fnctn := 'x-x*x';
6: fnctn := '(x+3)*(x-1)';
7: fnctn := 'x+x/2';
end;
end
else
begin
case ScndRnd of
1: fnctn := '(x*x)*(y*y)';
2: fnctn := 'y/x-x';
3: fnctn := 'x/y+y';
4: fnctn := 'x*y-x';
5: fnctn := 'y-x*x';
6: fnctn := '(y-1)*(x-1)';
7: fnctn := 'y/2+x/2';
end;
end;
if (FrstRnd = 1) then
begin
Form1.Label5.Text := '     ' + 'Функция одной переменной f(x).';
Form1.Label1.Text := '     ' + 'Начальные значения переменной x:';
Form1.Label2.Text := '     ';
Form1.Label4.Text := '     ';
Form1.Label3.Text := '     ';
for i := 0 to 8 do
Form1.Label2.Text := Form1.Label2.Text + IntToStr(Xstart[i]) + '; ';
Form1.Label2.Text := Form1.Label2.Text + IntToStr(Xstart[9]) + '.';
Form1.Label4.Text := '     ' + 'Конечные значения функции f(x):';
for i := 0 to 9 do
begin
str := Form1.Replacer(fnctn,i);
str := Form1.Separate(str);
str := FloatToStr(Form1.Parse(str));
finish[i] := StrToFloat(str);
finish[i] := RoundTo(finish[i],-2);
end;
for i := 0 to 8 do
Form1.Label3.Text := Form1.Label3.Text + FloatToStr(finish[i]) + '; ';
Form1.Label3.Text := Form1.Label3.Text + FloatToStr(finish[9]) + '.';
end
else
begin
Form1.Label5.Text := '     ' + 'Функция двух переменных f(x,y).';
Form1.Label1.Text := '     ' + 'Начальные значения переменных (x,y):';
Form1.Label2.Text := '     ';
Form1.Label4.Text := '     ';
Form1.Label3.Text := '     ';
for i := 0 to 8 do
Form1.Label2.Text := Form1.Label2.Text + '(' + IntToStr(Xstart[i]) + ',' + IntToStr(Ystart[i]) + '); ';
Form1.Label2.Text := Form1.Label2.Text + '(' + IntToStr(Xstart[9]) + ',' + IntToStr(Ystart[9]) + ').';
Form1.Label4.Text := '     ' + 'Конечные значения функции f(x,y):';
for i := 0 to 9 do
begin
str := Form1.Replacer(fnctn,i);
str := Form1.Separate(str);
str := FloatToStr(Form1.Parse(str));
finish[i] := StrToFloat(str);
finish[i] := RoundTo(finish[i],-2);
end;
for i := 0 to 8 do
Form1.Label3.Text := Form1.Label3.Text + FloatToStr(finish[i]) + '; ';
Form1.Label3.Text := Form1.Label3.Text + FloatToStr(finish[9]) + '.';
end;
end;


procedure TForm1.FormCreate(Sender: TObject);
begin
GridPanelLayout1.Width := Form1.ClientWidth;
GridPanelLayout1.Height := Form1.ClientHeight;
GridPanelLayout2.Width := Form1.ClientWidth-200;
ClearAbsAll;
CreatingVars;
Edit1.MaxLength := 120;
Edit1.Width := Form1.ClientWidth-200;
Edit1.Height := 34;
Refresh.Height := 34;
Refresh.Width := 120.000000000000000000;
Clear.Height := 34;
Clear.Width := 120.000000000000000000;
Submit.Height := 34;
Submit.Width := 120.000000000000000000;
end;


procedure TForm1.RefreshClick(Sender: TObject);
begin
ClearAll;
CreatingVars;
end;


procedure TForm1.SubmitClick(Sender: TObject);

var
counter : Integer;
temp, str: string;
begin
if (Edit1.Text = fnctn) then
begin
Edit1.Text := '';
str := '';
Edit1.Text := str;
Edit1.Text := 'Молодец, угадал.';
exit;
end;

counter := 0;
while (counter < 9) do
begin
str := Edit1.Text;
str := Form1.Replacer(str,counter);
str := Form1.Separate(str);
str := FloatToStr(Form1.Parse(str));
temp := Form1.Replacer(fnctn,counter);
temp := Form1.Separate(temp);
temp := FloatToStr(Form1.Parse(temp));
if str = temp then
counter := counter +1
else
begin
Edit1.Text := '';
str := '';
Edit1.Text := str;
Edit1.Text := 'Неправильно, пробуй еще раз.';
exit;
end;

end;
if counter = 9 then
Edit1.Text := 'Функция подобрана верно!';
exit;
end;

end.

